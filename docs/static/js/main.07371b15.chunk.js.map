{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","categories","className","type","value","onChange","target","category","a","url","encodeURI","fetch","response","json","data","gifs","map","gif","id","title","images","downsized_medium","getGifs","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mNAgCeA,EA7BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAgBvC,OACE,6BACE,0BAAMC,OAAO,GAAGC,SAXC,SAACC,GACpBA,EAAEC,iBAEEL,EAAWM,SACbR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAOZ,2BAAOO,UAAU,eAAeC,KAAK,OAAOC,MAAOV,EAAYW,SAhBhD,SAACP,GACpBH,EAAcG,EAAEQ,OAAOF,a,mECP3B,WAAuBG,GAAvB,uBAAAC,EAAA,4DACmB,mCACTC,EAFV,uDACmB,mCADnB,eAE6EC,UAAUH,GAFvF,uBAG2BI,MAAMF,GAHjC,cAGUG,EAHV,gBAMcA,EAASC,OANvB,uBAKQC,EALR,EAKQA,KAGEC,EAAOD,EAAKE,KAAI,SAACC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZ7C,kBAgBWM,GAhBX,6C,sBAmBeO,M,4CCVAC,EAPK,SAAC,GAAD,IAAEJ,EAAF,EAAEA,MAAOV,EAAT,EAASA,IAAT,OAClB,yBAAKP,UAAU,+CACb,2BAAIiB,GACJ,yBAAKK,IAAKf,EAAKgB,IAAI,OCoBRC,EArBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECGN,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACNR,EAAQf,GAAUwB,MAAK,SAAAhB,GACnBc,EAAS,CACLf,KAAMC,EACNY,SAAS,SAIlB,IAIIC,EDnBqBI,CAAazB,GAA9BQ,EAFmB,EAEzBD,KAAYa,EAFa,EAEbA,QAEnB,OACE,yBAAKzB,UAAU,uBACb,4BAAKK,GACJoB,GAAW,wCAEZ,yBAAKzB,UAAU,aACZa,EACGA,EAAKC,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,OAEhC,cALN,OEQSiB,EAjBM,WAAO,IAAD,EACWzC,mBAAS,CAAC,gBADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,6BACE,wBAAIU,UAAU,qCAAd,gBACA,kBAAC,EAAD,CAAaV,cAAeA,IAE5B,4BACGS,EAAWe,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,UCT5C4B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.07371b15.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); \n\n    if (inputValue.trim()) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('')\n    }\n  };\n\n  return (\n    <div>\n      <form action=\"\" onSubmit={handleSubmit}>\n        <input className=\"search-input\" type=\"text\" value={inputValue} onChange={handleChange} />\n      </form>\n    </div>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","async function getGifs(category) {\n    const apiKey = \"mjWGNSSOiOjn2D99jTbQjhx4QLl1KnYJ\";\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q='${encodeURI(category)}'&limit=12`;\n    const response = await fetch(url);\n    const {\n        data\n    } = await response.json();\n\n    const gifs = data.map((gif) => {\n        return {\n            id: gif.id,\n            title: gif.title,\n            url: gif.images.downsized_medium.url,\n        };\n    });\n    \n    return gifs;\n};\n\nexport default getGifs;","import React from \"react\";\n\nconst GifGridItem = ({title, url}) => (\n  <div className='card animate__animated animate__slideInDown'>\n    <p>{title}</p>\n    <img src={url} alt=\"\" />\n  </div>\n);\n\nexport default GifGridItem;\n","import React, {} from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ({ category }) => {\n\n  const {data: gifs, loading} = useFetchGifs(category);\n\n  return (\n    <div className=\"card-grid-container\">\n      <h3>{category}</h3>\n      {loading && <h5>Cargando</h5>}\n\n      <div className=\"card-grid\">\n        {gifs \n          ? gifs.map(gif => (\n              <GifGridItem key={gif.id} {...gif} />\n            )) \n          : 'No hay data'\n        };\n      </div>\n    </div>\n  );\n};\n\nexport default GifGrid;\n","import {\n    useState,\n    useEffect\n} from \"react\"\n\nimport getGifs from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(gifs => {\n            setState({\n                data: gifs,\n                loading: false\n            })\n        });\n\n    }, []);\n\n\n\n    return state;\n}","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"Dragon Ball\"]);\n\n  return (\n    <div>\n      <h2 className=\"animate__animated animate__rollIn\">GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n    \n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category}/>\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}